public class MyController extends PApplet {  //room dimensions  float rmWidth = 400;  float rmHeigt = 200;  float rmDepth = 400;  //objects  Rectangle3D ground, rWall, lWall, bWall;  Table table;  Table chair;  Cube chairBack;  Vessel sugarBowl;  Cube sugar;  Vessel glass;  // for sugar cube pile  int sugarCount = 80;  Vector3D[]sugarJitter = new Vector3D[sugarCount];  //colors  color wallCol = color(245, 250, 225);  color groundCol = color(50, 25, 30);  color tableCol = color(150, 75, 30);  color chairCol = color(140, 190, 100);  color sugarBowlCol = color(160, 160, 190);  color sugarCol = color(240, 240, 240);  color glassCol = color(100, 10, 40, 90);  //controls zooming  float camDistZ = 368, dz = 0, ang=0;  IG3D i;  void setup(){    size(400, 400, P3D);    //instantiate room objects    //room    ground = new Rectangle3D(rmWidth, rmDepth);    rWall = new Rectangle3D(rmDepth, rmHeigt);    lWall = new Rectangle3D(rmDepth, rmHeigt);    bWall = new Rectangle3D(rmWidth, rmHeigt);    //table    table = new Table(50, 16, 30);    //seat    chair = new Table(10, 10, 10);    chairBack = new Cube(10, 14, 1);    //sugar bowl    sugarBowl = new Vessel(8, 3, .5, 6);    sugar = new Cube(.6, .6, .6);    for (int i=0; i<sugarCount;i++){      sugarJitter[i] = new Vector3D(random(-1.8, 1.8), random(-.85, .85), random(-1.8, 1.8));    }    //drinking glass    glass = new Vessel(2.5, 4, .25, 20);    // renderer    i = new IG3D(this);    noStroke();  }  void draw(){    background(100);    lights();    fill(255);    dz = abs(cos(radians(ang+=.2))*camDistZ);    translate(width/2, height/18, max(dz, 220));    rotateX(-PI/16);    rotateY(frameCount*PI/150);    //ground    pushMatrix();    translate(0, rmHeigt);    rotateX(PI/2);    fill(groundCol);    i. render (ground);    popMatrix();    //right wall    pushMatrix();    translate(rmWidth/2, rmHeigt/2, 0);    rotateY(PI/2);    fill(wallCol);    i. render (rWall);    popMatrix();    //left wall    pushMatrix();    translate(-rmWidth/2, rmHeigt/2, 0);    rotateY(-PI/2);    fill(wallCol);    i. render (lWall);    popMatrix();    //back wall    pushMatrix();    translate(0, rmHeigt/2, -rmDepth/2);    fill(wallCol);    i. render (bWall);    popMatrix();    //table    pushMatrix();    translate(0, rmHeigt-table.getHeight()/2, 0);    rotateY(PI/4);    fill(tableCol);    i. render (table);    popMatrix();    //4 chairs    float px=0, pz=0, angle=90;    rotateY(PI/4);    for (int j=0; j<4; j++){      pushMatrix();      px = cos(radians(angle))*table.getWidth()/2;      pz = sin(radians(angle))*table.getDepth()/2;      translate(px, rmHeigt-chair.getHeight()/2, pz);      if (j>0){        rotateY(-PI/2*j);      }      fill(chairCol);      i.render(chair);      translate(0, -chairBack.getHeight()/2-chair.getHeight()/2, chair.getWidth()/2);      i. render (chairBack);      angle+=90;      popMatrix();    }    //vessels    //sugar bowl    pushMatrix();    translate(0, rmHeigt-table.getHeight(), 0);    rotateY(PI/4);    fill(sugarBowlCol);    i.render(sugarBowl);    fill(sugarCol);    for (int j=0; j<sugarCount; j++){      //resetMatrix();      pushMatrix();      translate(sugarJitter[j].x, -sugarBowl.getHeight()/2+sugarJitter[j].y,  sugarJitter[j].z);      rotateX(radians(sugarJitter[j].x*20));      rotateY(radians(sugarJitter[j].y*30));      rotateZ(radians(sugarJitter[j].z*40));      i. render (sugar);      popMatrix();    }    popMatrix();    //4 glasses    px=0;    pz=0;    angle=45;    rotateY(PI/4);    for (int j=0; j<4; j++){      pushMatrix();      px = cos(radians(angle))*(table.getWidth()/4);      pz = sin(radians(angle))*(table.getDepth()/3.75);      translate(px, rmHeigt-table.getHeight()-glass.getHeight()/2, pz);      fill(glassCol);      i.render(glass);      angle+=90;      popMatrix();    }  } }