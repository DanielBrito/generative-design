// Orbiting Planets/* required: "starfield.gif" needs to be added     to the data directory */import processing.opengl.*;PImage stars;int planetCount = 40;float[]x = new float[planetCount];float[]y = new float[planetCount];float[]z = new float[planetCount];float[]angle = new float[planetCount];float[]radius = new float[planetCount];float[]orbit = new float[planetCount];float[]speed = new float[planetCount];color[]planetColor = new color[planetCount];boolean lightSetup1, lightSetup2, lightSetup3, lightSetup4, lightSetup5, lightSetup6 = true;void setup(){  size(600, 400, OPENGL);  stars = loadImage("starfield.gif");   noStroke();   // fill arrays  for (int i=0; i<planetCount; i++){    y[i] = random(1.5, 1.7);    angle[i] = random(360);    radius[i] = random(.1, 5);    orbit[i] = random(130, 178);    speed[i] = random(.5, 2);    planetColor[i] = color(random(255), random(255), random(255), 255);  }}void draw(){  background(0);  //star box  fill(255, 190, 255, 255);  pushMatrix();  translate(width/2, height/2, -175);    textureMode(NORMALIZED);   starBox();  popMatrix();  //set lighting  if (lightSetup1){    ambientLight(110, 110, 110);   }   else if (lightSetup2){    ambientLight(40, 40, 30);    directionalLight(120, 130, 170, 1, 1, -1);   }   else if (lightSetup3){    ambientLight(60, 40, 60);    lightSpecular(50, 145, 175);     directionalLight(102, 102, 102, 1, 1, -1);     specular(160, 160, 160);    shininess(9);  }   else  if (lightSetup4){    ambientLight(40, 30, 50);    lightSpecular(50, 145, 175);     directionalLight(102, 102, 102, 1, 1, -1);     specular(160, 160, 160);    shininess(9);    spotLight(37, 75, 85, -100, height/2, 800, 1, 0, -1, PI/3, 5);  }  else  if (lightSetup5){    pointLight(10, 100, 130, width, height/2, -100);    ambientLight(30, 20, 40);    lightSpecular(50, 145, 175);     directionalLight(102, 102, 102, 1, 1, -1);     specular(160, 160, 160);    shininess(10);    spotLight(37, 75, 85, -100, height/2, 800, 1, 0, -1, PI/3, 5);  }  else  if (lightSetup6){    lights();  }  // orbiting planets  orbit();  // central large planet  hevihevi();}void hevihevi(){  pushMatrix();  translate(width/2, height/1.75, -230);  rotateZ(PI/16);  rotateY(frameCount*PI/90);  fill(55, 100, 110);  sphereDetail(32);  sphere(150);  popMatrix();}void orbit(){  for (int i=0; i<planetCount; i++){    pushMatrix();    sphereDetail(10);    fill(planetColor[i]);    rotateX(PI/10);    x[i] = cos(radians(angle[i]))*orbit[i];    z[i] = sin(radians(angle[i]))*orbit[i]*2;    translate(width/2+x[i], (height+10)/y[i], -75+z[i]);    angle[i]+=speed[i];    rotateY(frameCount*PI/40);    rotateX(PI/5);    rotateZ(-PI/5);    sphere(radius[i]);    popMatrix();  }}void starBox(){  // back wall  plotWall();   //left wall  pushMatrix();  rotateY(PI/2);  plotWall();   popMatrix();  //right wall  pushMatrix();  rotateY(-PI/2);  plotWall();   popMatrix();  //bottom wall  pushMatrix();  rotateX(PI/2);  plotWall();   popMatrix();  //top wall  pushMatrix();  rotateX(-PI/2);  plotWall();   popMatrix();}void plotWall(){  beginShape();  texture(stars);   vertex(-width/2, -height/2, -200, 0, 0);   vertex(-width/2, height/2, -200, 1, 0);  vertex(width/2, height/2, -200, 1, 1);  vertex(width/2, -height/2, -200, 0, 1);  endShape(CLOSE); }//interactivityvoid keyPressed(){  if (key=='1'){    clearLights();    lightSetup1 = true;  }   else if (key=='2'){    clearLights();    lightSetup2 = true;  }   else if (key=='3'){    clearLights();    lightSetup3 = true;  }   else if (key=='4'){    clearLights();    lightSetup4 = true;  }   else if (key=='5'){    clearLights();    lightSetup5 = true;  }   else if (key=='6'){    clearLights();    lightSetup6 = true;  }}void clearLights(){  lightSetup1 = false;  lightSetup2 = false;  lightSetup3 = false;  lightSetup4 = false;  lightSetup5 = false;  lightSetup6 = false;}