// revised IG3D classimport processing.core.*;public class IG3D{  private PApplet p;  // arrays for precomputed trig functions  private float sinVals[] = {0, 0, 0};  private float cosVals[] = {1, 1, 1};  public IG3D(PApplet p){    this.p = p;  }    //precompute trig functions for rotations  public void rotX(float ang){    sinVals[0] = p.sin(p.radians(ang));    cosVals[0] = p.cos(p.radians(ang));  }     public void rotY(float ang){    sinVals[1] = p.sin(p.radians(ang));    cosVals[1] = p.cos(p.radians(ang));  }    public void rotZ(float ang){    sinVals[2] = p.sin(p.radians(ang));    cosVals[2] = p.cos(p.radians(ang));  }   private void rotXYZ(Triangle3D[]t){    for (int i=0; i<t.length; i++){      for (int j=0; j<3; j++){        t[i].v[j].setRotation(sinVals, cosVals);      }    }  }  public void render(IGShape3D shape){    Triangle3D[]t = shape.getTriangles();    rotXYZ(t);    for (int i=0; i<t.length; i++){      p.beginShape(p.TRIANGLES);      for (int j=0; j<3; j++){        p.vertex(t[i].v[j].x, t[i].v[j].y);      }      p.endShape();    }     } }