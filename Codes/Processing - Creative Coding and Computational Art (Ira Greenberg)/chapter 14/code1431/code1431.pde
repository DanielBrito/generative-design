// draw normals  public void renderNormals(IGShape3D shape, float len){    Vector3D cp = new Vector3D();    float normLen = 75;    float lineX1 = 0, lineY1 = 0, lineX2 = 0, lineY2;    float projectedX1 = 0, projectedY1 = 0, projectedX2 = 0, projectedY2 = 0;    float projectionRatio = 0;    Triangle3D[]t = shape.getTriangles();    for (int i=0; i<t.length; i++){      // get cross product      cp = t[i].v[0].getCrossProduct(t[i].v[1], t[i].v[2]);      // calculate perspective ratio      projectionRatio = viewDistance/(viewDistance - (cp.z+transVals.z));      // normal line base-centered in triangle      lineX1 = (t[i].v[0].x + t[i].v[1].x + t[i].v[2].x)/3;      lineY1 = (t[i].v[0].y + t[i].v[1].y + t[i].v[2].y)/3;      // normal line tip-centered in triangle      lineX2 = lineX1+cp.x * len;      lineY2 = lineY1+cp.y * len;      // 2D perspective projection with translation      projectedX1 = lineX1 * projectionRatio + transVals.x;      projectedY1 = lineY1 * projectionRatio + transVals.y;      projectedX2 = lineX2 * projectionRatio + transVals.x;      projectedY2 = lineY2 * projectionRatio + transVals.y;      p.line(projectedX1, projectedY1, projectedX2, projectedY2);     }  } 