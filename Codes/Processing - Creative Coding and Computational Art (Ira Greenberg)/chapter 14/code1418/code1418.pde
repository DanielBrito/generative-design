public class Table implements IGShape3D{  private float tableTopThickness;  private float legThickness;  private float w, h, d;  private Vector3D[]v = new Vector3D[40];  private Triangle3D[]t = new Triangle3D[44];  public Table(float w, float h, float d){    this(w, h, d, (w+d)/40, h/10);  }    public Table(float w, float h, float d, float tableTopThickness, float legThickness){    this.w = w;    this.h = h;    this.d = d;    this.tableTopThickness = tableTopThickness;    this.legThickness = legThickness;    setVertices();    setTriangles();  }  //getter/setters  public float getWidth(){    return w;  }  public void setWidth(float w){    this.w = w;  }  public float getHeight(){    return h;  }  public void setHeight(float h){    this.h = h;  }  public float getDepth(){    return d;  }  public void setDepth(float d){    this.d = d;  }  //required implemented methods   public void setVertices(){    // table top (top surface)    v[0] = new Vector3D(-w/2, -h/2, d/2);    v[1] = new Vector3D(-w/2, -h/2, -d/2);    v[2] = new Vector3D(w/2, -h/2, -d/2);    v[3] = new Vector3D(w/2, -h/2, d/2);    // table top (bottom surface)    v[4] = new Vector3D(-w/2, -h/2+tableTopThickness , d/2);    v[5] = new Vector3D(-w/2, -h/2+tableTopThickness, -d/2);    v[6] = new Vector3D(w/2, -h/2+tableTopThickness, -d/2);    v[7] = new Vector3D(w/2, -h/2+tableTopThickness, d/2);    /**front legs**/    // left front leg (leg top)    v[8] = new Vector3D(-w/2, -h/2+tableTopThickness, d/2);    v[9] = new Vector3D(-w/2+legThickness, -h/2+tableTopThickness, d/2);    v[10] = new Vector3D(-w/2+legThickness, -h/2+tableTopThickness, d/2-legThickness);    v[11] = new Vector3D(-w/2, -h/2+tableTopThickness, d/2-legThickness);    // left front leg (leg bottom)    v[12] = new Vector3D(-w/2, h/2 , d/2);    v[13] = new Vector3D(-w/2+legThickness, h/2, d/2);    v[14] = new Vector3D(-w/2+legThickness, h/2, d/2-legThickness);    v[15] = new Vector3D(-w/2, h/2, d/2-legThickness);    // right front leg (leg top)    v[16] = new Vector3D(w/2, -h/2+tableTopThickness, d/2);    v[17] = new Vector3D(w/2-legThickness, -h/2+tableTopThickness, d/2);    v[18] = new Vector3D(w/2-legThickness, -h/2+tableTopThickness, d/2-legThickness);    v[19] = new Vector3D(w/2, -h/2+tableTopThickness, d/2-legThickness);    // right front leg (leg bottom)    v[20] = new Vector3D(w/2, h/2 , d/2);    v[21] = new Vector3D(w/2-legThickness, h/2, d/2);    v[22] = new Vector3D(w/2-legThickness, h/2, d/2-legThickness);    v[23] = new Vector3D(w/2, h/2, d/2-legThickness);    /**rear legs**/    // left rear leg (leg top)    v[24] = new Vector3D(-w/2, -h/2+tableTopThickness, -d/2);    v[25] = new Vector3D(-w/2+legThickness, -h/2+tableTopThickness, -d/2);    v[26] = new Vector3D(-w/2+legThickness, -h/2+tableTopThickness, -d/2+legThickness);    v[27] = new Vector3D(-w/2, -h/2+tableTopThickness, -d/2+legThickness);    // left rear leg (leg bottom)    v[28] = new Vector3D(-w/2, h/2 , -d/2);    v[29] = new Vector3D(-w/2+legThickness, h/2, -d/2);    v[30] = new Vector3D(-w/2+legThickness, h/2, -d/2+legThickness);    v[31] = new Vector3D(-w/2, h/2, -d/2+legThickness);    // right rear leg (leg top)    v[32] = new Vector3D(w/2, -h/2+tableTopThickness, -d/2);    v[33] = new Vector3D(w/2-legThickness, -h/2+tableTopThickness, -d/2);    v[34] = new Vector3D(w/2-legThickness, -h/2+tableTopThickness, -d/2+legThickness);    v[35] = new Vector3D(w/2, -h/2+tableTopThickness, -d/2+legThickness);    // right rear leg (leg bottom)    v[36] = new Vector3D(w/2, h/2 , -d/2);    v[37] = new Vector3D(w/2-legThickness, h/2, -d/2);    v[38] = new Vector3D(w/2-legThickness, h/2, -d/2+legThickness);    v[39] = new Vector3D(w/2, h/2, -d/2+legThickness); } public Vector3D[] getVertices() {   return v; } public void setTriangles(){    /***table top***/    //top    t[0] = new Triangle3D(v[0], v[1], v[2]);    t[1] = new Triangle3D(v[0], v[2], v[3]);    //bottom    t[2] = new Triangle3D(v[5], v[4], v[7]);    t[3] = new Triangle3D(v[5], v[7], v[6]);    //front    t[4] = new Triangle3D(v[0], v[3], v[7]);    t[5] = new Triangle3D(v[0], v[7], v[4]);    //right    t[6] = new Triangle3D(v[3], v[2], v[6]);    t[7] = new Triangle3D(v[3], v[6], v[7]);    //back    t[8] = new Triangle3D(v[2], v[1], v[5]);    t[9] = new Triangle3D(v[2], v[5], v[6]);    //left    t[10] = new Triangle3D(v[1], v[0], v[4]);    t[11] = new Triangle3D(v[1], v[4], v[5]);    /***table legs***/    // leg faces can be processed efficiently using a loop    for (int i=0; i<32; i+=8){      //front face      t[12+i] = new Triangle3D(v[8+i], v[11+i], v[15+i]);      t[13+i] = new Triangle3D(v[8+i], v[15+i], v[12+i]);      //right face      t[14+i] = new Triangle3D(v[11+i], v[10+i], v[14+i]);      t[15+i] = new Triangle3D(v[11+i], v[14+i], v[15+i]);      //back face      t[16+i] = new Triangle3D(v[10+i], v[9+i], v[13+i]);      t[17+i] = new Triangle3D(v[10+i], v[13+i], v[14+i]);      //left face      t[18+i] = new Triangle3D(v[9+i], v[8+i], v[12+i]);      t[19+i] = new Triangle3D(v[9+i], v[12+i], v[13+i]);    }  }  public Triangle3D[] getTriangles(){    return t;  }}