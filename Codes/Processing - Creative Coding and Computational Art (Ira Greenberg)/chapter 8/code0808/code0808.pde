/* polymorphism example using  inheritance, interface and an abstract class */void setup(){  Ogre o = new Ogre();  Elf e = new Elf();  Knight k = new Knight();  Engine eng = new Engine();  eng.addCreature(o);  eng.addCreature(e);  eng.launchArrow(e);  eng.launchArrow(k);  println(o.getCreatureName());  println(e.getCreatureName());  println(k.getCreatureName());}// abstract Creature superclassabstract class Creature{  /* this method will be overrided by    Creature subclasses */  void castSpell(){    println("nothing to say");  }  //abstract getCreatureName method  abstract String getCreatureName();}// Ogre subclassclass Ogre extends Creature{  // overrided method within Creature superclass  void castSpell(){    println("I miss ya donkey");  }  /* required method implmentation   from abstract Creature superclass */  String getCreatureName(){    return "I am an Ogre";  }}// Elf subclassclass Elf extends Creature implements Archer{  // overrided method within Creature superclass  void castSpell(){    println("Gotta make the cookies");  }  /* required method implmentation   from interface Archer */  void shoot(){    println("Elf shoots");  }  /* required method implmentation   from abstract Creature superclass */  String getCreatureName(){    return "I am an Elf";  }}// Knight subclassclass Knight extends Creature implements Archer{  // overrided method within Creature superclass  void castSpell(){    println("Mirror, mirror on thw wall...");  }  /* required method implmentation   from interface Archer */  void shoot(){    println("Knight shoots");  }  /* required method implmentation   from abstract Creature superclass */  String getCreatureName(){    return "I am a Knight";  }}interface Archer{  void shoot();}/* game engine-with embedded superclass  reference in the addCreature() method  and embedded interface reference in  launchArrow method */class Engine{  void addCreature(Creature c){    c.castSpell();  }  void launchArrow(Archer a){    a.shoot();  }}